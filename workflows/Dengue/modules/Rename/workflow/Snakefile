"""Sampling (Background)
"""
configfile: "config/config.yaml"
import os
import re
import shutil
from pathlib import Path
from fnmatch import fnmatch
from grapevne_helper import import_grapevne

grapevne = import_grapevne(workflow)
globals().update(vars(grapevne))


# Checkpoints must be globally unqiue
cp_name = "wait_for_input_trigger"
unique_cp_name = cp_name
index = 1
while unique_cp_name in dir(checkpoints):
    unique_cp_name = f"{cp_name}_{index}"
    index += 1


# Read files from the input folder

checkpoint:
    name:
        # Checkpoints must be globally unique
        unique_cp_name
    input:
        # Input trigger to execute workflow
        input(param('Triggers', 'Parse inputs')),
    output:
        trigger = touch(output("trigger")),
        # Places a marker in the input folder. This is required to carry the input
        # namespace into the get_folder_list() function; otherwise, input() is
        # evaluated according to the first rule in the 'entire' workflow.
        input_mark = touch(input(f".{unique_cp_name}.mark")),

def get_folder_list(wc, returnInputs=False, wrapper=None):
    if not wrapper:
        wrapper = lambda x: x

    trigger_file = getattr(checkpoints, unique_cp_name).get().output.trigger 
    output_folder = os.path.dirname(trigger_file)
    input_mark = getattr(checkpoints, unique_cp_name).get().output.input_mark
    input_folder = os.path.dirname(input_mark)

    input_pattern = config['params']["Input Pattern"]  # (params references the wrong workspace?)
    output_pattern = config['params']["Output Pattern"]

    # Convert the input pattern into a regex to extract wildcard fields
    regex_pattern = re.escape(input_pattern)
    regex_pattern = regex_pattern.replace(r"\*", ".*").replace(r"\?", ".")
    regex_pattern = re.sub(r"\\\{(\w+)\\\}", r"(?P<\1>.+?)", regex_pattern)

    # Prepare results
    matched_files = []
    filelist = os.listdir(input_folder)
    for filename in filelist:
        match = re.match(regex_pattern, filename)
        if match:
            # Generate new filename based on the output pattern
            new_filename = output_pattern.format(**match.groupdict())
            matched_files.append((filename, new_filename))

    # Wildcard match
    files_in = [
        wrapper(orig)
        for orig, mapped in matched_files
        if mapped == wc.filename
    ]
    files_out = [
        os.path.join(output_folder, mapped)
        for orig, mapped in matched_files
        if mapped == wc.filename
    ]
    if returnInputs:
        return files_in
    return files_out

# Preserve module-specific wrapper function
input_wrapper = input

rule rename:
    input:
        lambda wc: get_folder_list(wc, returnInputs=True, wrapper=input_wrapper),
    output:
        output("{filename}"),
    params:
        outdir = output(),
    run:
        Path(params.outdir).mkdir(parents=True, exist_ok=True)
        shutil.copyfile(input[0], output[0])

# Test rule

rule _test:
    input:
        output("A.fasta"),
        output("B.fasta"),
        output("C.fasta"),
