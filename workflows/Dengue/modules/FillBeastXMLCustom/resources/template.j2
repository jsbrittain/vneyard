<?xml version="1.0" standalone="yes"?>

<!-- Generated by BEAUTi v10.5.0-beta5 Prerelease #unknown                   -->
<!--       by Alexei J. Drummond, Andrew Rambaut and Marc A. Suchard         -->
<!--       Department of Computer Science, University of Auckland and        -->
<!--       Institute of Evolutionary Biology, University of Edinburgh        -->
<!--       David Geffen School of Medicine, University of California, Los Angeles-->
<!--       http://beast.community/                                           -->
<beast version="10.5.0-beta5">
    

    <!-- The list of taxa to be analysed (can also include dates/ages).          -->
    <!-- ntax={{ ntax }}                                               -->
    <taxa id="taxa">
    {% for taxon in taxa %}
        <taxon id="{{ taxon.id }}">
            <date value="{{ taxon.date }}" direction="forwards" units="years" />
        </taxon>
    {% endfor %}
    </taxa>
    

    <!-- A prior assumption that the population size has remained constant       -->
    <!-- throughout the time spanned by the genealogy.                           -->
    <constantSize id="constant" units="years">
        <populationSize>
            <parameter id="constant.popSize" value="1.0" lower="0.0"/>
        </populationSize>
    </constantSize>
    

    <!-- The user-specified tree with dates used to simulate a compatible bifurcating starting tree.-->
    <newick id="constraintsTree" usingDates="true">
        {{ tree }}
    </newick>

    <!-- Generate a random starting tree under the coalescent process            -->
    <coalescentSimulator id="startingTree">
        <constantSize idref="constant"/>
        <constraintsTree>
            <newick idref="constraintsTree"/>
        </constraintsTree>
    </coalescentSimulator>
    

    <!-- A constrained tree model                                                -->
    <constrainedTreeModel id="treeModel">
        <coalescentTree idref="startingTree"/>
        <constraintsTree>
            <newick idref="constraintsTree"/>
        </constraintsTree>

        <!-- Parameter proxies for node heights                                      -->
        <rootHeight>
            <parameter id="treeModel.rootHeight"/>
        </rootHeight>
        <nodeHeights internalNodes="true">
            <parameter id="treeModel.internalNodeHeights"/>
        </nodeHeights>
        <nodeHeights internalNodes="true" rootNode="true">
            <parameter id="treeModel.allInternalNodeHeights"/>
        </nodeHeights>
    </constrainedTreeModel>

    <!-- Statistic for height of the root of the tree                            -->
    <treeHeightStatistic id="rootHeight">
        <treeModel idref="treeModel"/>
    </treeHeightStatistic>

    <!-- Statistic for sum of the branch lengths of the tree (tree length)       -->
    <treeLengthStatistic id="treeLength">
        <treeModel idref="treeModel"/>
    </treeLengthStatistic>

    <!-- Statistic for time of most recent common ancestor of tree               -->
    <tmrcaStatistic id="age(root)" absolute="true">
        <treeModel idref="treeModel"/>
    </tmrcaStatistic>
    

    <!-- Generate a coalescent likelihood                                        -->
    <coalescentLikelihood id="coalescent">
        <model>
            <constantSize idref="constant"/>
        </model>
        <intervals>
            <bigFastTreeIntervals>
                <constrainedTreeModel idref="treeModel"/>
            </bigFastTreeIntervals>
        </intervals>
    </coalescentLikelihood>
    

    <!-- The strict clock (Uniform rates across branches)                        -->
    <strictClockBranchRates id="branchRates">
        <rate>
            <parameter id="clock.rate" value="0.001" lower="0.0"/>
        </rate>
    </strictClockBranchRates>
    
    <rateStatistic id="meanRate" name="meanRate" mode="mean" internal="true" external="true">
        <treeModel idref="treeModel"/>
        <strictClockBranchRates idref="branchRates"/>
    </rateStatistic>
    

    <!-- A map between the branches in the tree model and the data providing the number of mutations along each branch.-->
    <simpleMutationBranchMap id="branchMutationCounts" scale="1.0">
        <constrainedTreeModel idref="treeModel"/>
        <dataTree>
            <newick id="dataTree" usingHeights="true" usingDates="false">
                {{ tree }}
            </newick>
        </dataTree>
    </simpleMutationBranchMap>
    <thorneyTreeLikelihood id="treeLikelihood">
        <constrainedTreeModel idref="treeModel"/>
        <simpleMutationBranchMap idref="branchMutationCounts"/>
        <poissonBranchLengthLikelihood id="branchMutationLikelihood" scale="1.0"/>
        <strictClockBranchRates idref="branchRates"/>
    </thorneyTreeLikelihood>
    

    <!-- Define operators                                                        -->
    <operators id="operators" optimizationSchedule="log">
        <scaleOperator scaleFactor="0.75" weight="3">
            <parameter idref="clock.rate"/>
        </scaleOperator>
        <upDownOperator scaleFactor="0.75" weight="3">
            <up>
                <parameter idref="treeModel.allInternalNodeHeights"/>
            </up>
            <down>
                <parameter idref="clock.rate"/>
            </down>
        </upDownOperator>
        <scaleOperator scaleFactor="0.75" weight="{{ ntax_div_100 }}">
            <parameter idref="treeModel.rootHeight"/>
        </scaleOperator>
        <uniformOperator weight="{{ ntax }}">
            <parameter idref="treeModel.internalNodeHeights"/>
        </uniformOperator>
        <uniformSubtreePruneRegraft weight="{{ ntax }}">
            <constrainedTreeModel idref="treeModel"/>
        </uniformSubtreePruneRegraft>
        <narrowExchange weight="{{ ntax }}">
            <treeModel idref="treeModel"/>
        </narrowExchange>
        <wideExchange weight="{{ ntax_div_100 }}">
            <treeModel idref="treeModel"/>
        </wideExchange>
        <wilsonBalding weight="{{ ntax_div_100 }}">
            <treeModel idref="treeModel"/>
        </wilsonBalding>
        <scaleOperator scaleFactor="0.75" weight="3">
            <parameter idref="constant.popSize"/>
        </scaleOperator>
    </operators>
    

    <!-- Define MCMC                                                             -->
    <mcmc id="mcmc" chainLength="{{ chain_length }}" autoOptimize="true">
        <joint id="joint">
            <prior id="prior">
                <ctmcScalePrior>
                    <ctmcScale>
                        <parameter idref="clock.rate"/>
                    </ctmcScale>
                    <treeModel idref="treeModel"/>
                </ctmcScalePrior>
                <gammaPrior shape="0.001" scale="1000.0" offset="0.0">
                    <parameter idref="constant.popSize"/>
                </gammaPrior>
                <coalescentLikelihood idref="coalescent"/>
                
                
                <strictClockBranchRates idref="branchRates"/>
            </prior>
            <likelihood id="likelihood">
                <thorneyTreeLikelihood idref="treeLikelihood"/>
            </likelihood>
        </joint>
        <operators idref="operators"/>

        <!-- write log to screen                                                     -->
        <log id="screenLog" logEvery="{{ log_every }}">
            <column label="Joint" dp="4" width="12">
                <joint idref="joint"/>
            </column>
            <column label="Prior" dp="4" width="12">
                <prior idref="prior"/>
            </column>
            <column label="Likelihood" dp="4" width="12">
                <likelihood idref="likelihood"/>
            </column>
            <column label="age(root)" sf="6" width="12">
                <tmrcaStatistic idref="age(root)"/>
            </column>
            <column label="clock.rate" sf="6" width="12">
                <parameter idref="clock.rate"/>
            </column>
        </log>

        <!-- write log to file                                                       -->
        <log id="fileLog" logEvery="{{ log_every }}" fileName="{{ output_stem }}.log" overwrite="false">
            <joint idref="joint"/>
            <prior idref="prior"/>
            <likelihood idref="likelihood"/>
            <treeHeightStatistic idref="rootHeight"/>
            <tmrcaStatistic idref="age(root)"/>
            <treeLengthStatistic idref="treeLength"/>
            <parameter idref="constant.popSize"/>
            <parameter idref="clock.rate"/>
            <rateStatistic idref="meanRate"/>
            <thorneyTreeLikelihood idref="treeLikelihood"/>
            <strictClockBranchRates idref="branchRates"/>
            <coalescentLikelihood idref="coalescent"/>
            
        </log>

        <!-- write tree log to file                                                  -->
        <logTree id="treeFileLog" logEvery="{{ log_every }}" nexusFormat="true" fileName="{{ output_stem }}.trees" sortTranslationTable="true">
            <treeModel idref="treeModel"/>
            <trait name="rate" tag="rate">
                <strictClockBranchRates idref="branchRates"/>
            </trait>
            <joint idref="joint"/>
        </logTree>

        <!-- write state of Markov chain to checkpoint file                          -->
        <logCheckpoint id="checkpointFileLog" checkpointEvery="{{ checkpoint_every }}" checkpointFinal="{{ checkpoint_final }}" fileName="{{ output_stem }}.chkpt" overwrite="false"/>
    </mcmc>
    
    <report>
        <property name="timer">
            <mcmc idref="mcmc"/>
        </property>
    </report>
    
</beast>
