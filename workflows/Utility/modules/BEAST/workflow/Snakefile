"""Runs or resumes a BEAST [https://beast.community/] analysis

Params:
    xml_file (string): Input XML file
    save_every (number): Iterations between checkpoint saves, default 1000
    options (string): Additional command line options
"""
configfile: "config/config.yaml"

indir = config["input_namespace"]
outdir = config["output_namespace"]
params = config["params"]

checkpoint_file = expand(
    "results/{outdir}/checkpoint.state",
    outdir=config["output_namespace"]
)

rule target:
    input:
        expand(
            "results/{outdir}/mark",
            outdir=config["output_namespace"],
        )

rule resume_beast:
    input:
        xml=expand(
            "results/{indir}/{xml}",
            indir=indir,
            xml=params["xml_file"],
        ),
        checkpoint=checkpoint_file,
    output:
        expand(
            "results/{outdir}/mark",
            outdir=config["output_namespace"],
        )
    params:
        checkpoint=checkpoint_file,
        save_every=params["save_every"],
        opts=params["options"],
    log:
        "log/resume_beast.log"
    benchmark:
        "benchmark/resume_beast.txt"
    conda:
        "envs/conda.yml"
    shell:
        """
        beast \
            -overwrite \
            -save_every {params.save_every} \
            -save_state {params.checkpoint} \
            -load_state {params.checkpoint} \
            -force_resume \
            {params.opts} \
            {input.xml} \
            > >(tee -a log/stdout.log) 2> >(tee -a log/stderr.log >&2) 
        
        # Move residual BEAST log files
        mkdir -p log
        mv *.txt log
        
        # Signal completion
        touch {output}
        """

rule run_beast:
    input:
        xml=expand(
            "results/{indir}/{xml}",
            indir=indir,
            xml=params["xml_file"],
        )
    output:
        expand(
            "results/{outdir}/mark",
            outdir=config["output_namespace"],
        )
    log:
        "log/run_beast.log"
    benchmark:
        "benchmark/run_beast.txt"
    params:
        checkpoint=checkpoint_file,
        save_every=params["save_every"],
        opts=params["options"],
    conda:
        "envs/conda.yml"
    shell:
        """
        beast \
            -save_every {params.save_every} \
            -save_state {params.checkpoint} \
            {params.opts} \
            {input.xml} \
            > >(tee -a log/stdout.log) 2> >(tee -a log/stderr.log >&2) 

        # Move residual BEAST log files
        mkdir -p log
        mv *.txt log

        # Signal completion
        touch {output}
        """

ruleorder: resume_beast > run_beast
