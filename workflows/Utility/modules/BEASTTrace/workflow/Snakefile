"""Visualisation of BEAST trace data

Provides visualisation of BEAST trace data in the form of scatter plots and joint distributions. These are generated by a custom Python script. They will be recursively generated at regular time intervals until the end of the monitoring period is signalled by the presence of an end 'trigger' file.

Inputs:
    file: Link to a CSV file containing the data to be visualised
    end: A trigger signifying the end of the monitoring period.

Params:
    filename (str): Name of the file to monitor
    cols (str): Columns to plot (all if empty). Expected format is "x,y,z"
    joint (str): Joint distributions to plot (none if empty). Expected format is "a,b;c,d;e,f"
    interval (number): Time interval between visualisations (in minutes)
    Update on modify (bool): If true, visualisation will only be updated if the input file has been modified
    End trigger file (str): Name of the trigger file to end visualization (e.g. "trigger")
    Ready triger file (str): Name of the trigger file that will cause a visualisation response (e.g. "ready"). This will be appended with a number to indicate each unique visualisation, e.g. "ready1", "ready2", etc.
"""
configfile: "config/config.yaml"

indir_file = config["input_namespace"]["file"]
indir_end = config["input_namespace"]["end"]
outdir = config["output_namespace"]
params = config["params"]
filename = params["filename"]
update_on_modify = str(params["Update on modify"]).lower()

rule trace:
    input:
        filename = f"results/{indir_file}/{filename}",
    output:
        # Execution ends when this file is created
        touch = f"results/{outdir}/touch",
    log:
        "logs/trace.log",
    benchmark:
        "benchmarks/trace.benchmark",
    conda:
        "envs/python.yaml",
    params:
        cols = params["cols"],
        joint = params["joint"],
        outdir = f"results/{outdir}",
        interval = params["interval"] / 60,  # interval in secs
        update_on_modify = update_on_modify,
        end_marker = f"results/{indir_end}/{params['End trigger file']}",
        ready_marker = f"results/{outdir}/{params['Ready trigger file']}",
    shell:
        """
        # Remove any markers that exist
        rm -f {params.end_marker}
        rm -f {params.ready_marker}*

        # Emulate a do-while loop so that the loop runs at least once
        last_datetime=""
        while : ; do
            # Check if the file has been modified since the last visualisation
            current_datetime=$(date -r {input.filename} "+%m-%d-%Y %H:%M:%S")
            if [[ "{params.update_on_modify}" == "false" ]] || [[ "$current_datetime" != "$last_datetime" ]]; then
                last_datetime="$current_datetime"
                # One-shot visualisation
                python workflow/scripts/visualise.py \
                    --filename {input.filename} \
                    --cols "{params.cols}" \
                    --joint "{params.joint}" \
                    --outdir {params.outdir}
                # Signal that the visualisation is ready
                touch {params.ready_marker}
            fi
            # Break from loop if the end marker is present
            [[ ! -f {params.end_marker} ]] || break
            # Sleep
            sleep {params.interval}
        done

        # Mark the end of execution
        echo "done" > {output.touch}
        """
