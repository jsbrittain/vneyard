"""Template module

This is a template module that can be modified to provide new modules. The module looks for a named input file from the input port and echoes the contents of that file to a (new) named output file, which is made available to downstream modules via the output port.

Params:
    infile (str): The name of the input file to read from the input port
    outfile (str): The name of the output file to write to the output port
"""
configfile: "config/config.yaml"
from snakemake.remote import AUTO

indir=config["input_namespace"]
outdir=config["output_namespace"]
params=config["params"]
infile=params["infile"]
outfile=params["outfile"]


def script(name=""):
    """Return the path to a script (detects local or remote execution modes)"""
    workflow_srcdir = srcdir("")
    try:
        from snakemake.remote import AUTO

        return AUTO.remote("/".join([workflow_srcdir, "scripts", name]))
    except TypeError:
        return Path(workflow_srcdir) / "scripts" / name


rule target:
    input:
        infile = f"results/{indir}/{infile}",
        script = script("test.sh"),
    output:
        f"results/{outdir}/{outfile}",
    log:
        f"benchmark/{outdir}.log"
    benchmark:
        f"benchmark/{outdir}.txt"
    conda:
        "envs/conda.yaml"
    shell:
        """
        {input.script} {input.infile} {output[0]}
        """

rule _test:
    input:
        infile=f"results/{outdir}/{outfile}",
        outfile=f"results/{outdir}/{outfile}",
    run:
        # Check that the output file exists and contains the same content as the input file
        assert Path(input.infile).read_text() == Path(input.outfile).read_text()
