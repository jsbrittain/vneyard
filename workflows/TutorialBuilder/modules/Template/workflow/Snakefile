"""Template module

This is a template module that can be modified to provide new modules. The module looks for a named input file from the input port and echoes the contents of that file to a (new) named output file, which is made available to downstream modules via the output port.

Params:
    infile (str): The name of the input file to read from the input port
    outfile (str): The name of the output file to write to the output port
"""
configfile: "config/config.yaml"
from grapevne_helper import import_grapevne

grapevne = import_grapevne(workflow)
globals().update(vars(grapevne))


rule target:
    input:
        infile = input(params("infile")),
        script = script("test.sh"),
    output:
        output(params("outfile")),
    log:
        log("log.txt"),
    benchmark:
        benchmark("benchmark.tsv")
    conda:
        env("conda.yaml")
    shell:
        """
        {input.script} {input.infile} {output[0]}
        """

rule _test:
    input:
        infile=input(params("infile")),
        outfile=output(params("outfile"))
    run:
        # Check that the output file exists and contains the same content as the input file
        assert Path(input.infile).read_text() == Path(input.outfile).read_text()
